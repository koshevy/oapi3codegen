"use strict";
exports.__esModule = true;
/* tslint:disable */
exports.template = "\n/* tslint:disable */\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { Inject, Injectable, Optional } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { ApiService } from '@codegena/ng-api-service';\nimport { ApiSchema } from '@codegena/ng-api-service/lib/providers/api-schema';\nimport { SERVERS_INFO, ServersInfo } from \"@codegena/ng-api-service\";\n\nimport {\n    API_ERROR_HANDLER,\n    ApiErrorHandler,\n    DISABLE_VALIDATION,\n    RESET_API_SUBSCRIBERS,\n    VIRTUAL_CONNECTION_STATUS\n} from \"@codegena/ng-api-service\";\n\n// Typings for this API method\nimport { {{typingsDependencies}} } from '{{typingsDirectory}}';\n\nconst domainSchema = require({{apiSchemaFile}});\n\n/**\n * Service for angular based on ApiAgent solution.\n * Provides assured request to API method with implicit\n * validation and common errors handling scheme.\n */\n@Injectable()\nexport class {{baseTypeName}}Service extends ApiService<{{responseModelName}}, {{requestModelName}}, {{paramsModelName}}> {\n\n    protected get method(): {{method}} {\n        return {{method}};\n    }\n\n    /**\n     * Path template, example: `/some/path/{id}`.\n     */\n    protected get pathTemplate(): string {\n        return {{path}};\n    }\n\n    /**\n     * Parameters in a query.\n     */\n    protected get queryParams(): string[] {\n        return {{queryParams}};\n    }\n\n    /**\n     * API servers.\n     */\n    protected get servers(): string[] {\n        return {{servers}};\n    }\n\n    /**\n     * Complete domain API schema (OAS3) with library\n     * of models.\n     */\n    protected get domainSchema(): any {\n        return domainSchema;\n    }\n\n    /**\n     * JSON Schemas using for validations at requests.\n     */\n    protected get schema(): ApiSchema {\n        return {\n            params: {{paramsSchema}},\n            request: {{requestSchema}},\n            response: {{responseSchema}}\n        } as any;\n    }\n\n\t\t// *** Methods\n\n    constructor(\n        protected httpClient: HttpClient,\n        @Inject(API_ERROR_HANDLER)\n            protected errorHandler: ApiErrorHandler,\n        @Inject(SERVERS_INFO)\n            protected serversInfo: ServersInfo,\n        @Inject(RESET_API_SUBSCRIBERS)\n            protected resetApiSubscribers: Subject<void>,\n        @Inject(VIRTUAL_CONNECTION_STATUS)\n            protected virtualConnectionStatus: BehaviorSubject<boolean>,\n        @Optional() @Inject(DISABLE_VALIDATION)\n            protected disableValidation: boolean\n    ) {\n        super(\n            httpClient,\n            errorHandler,\n            serversInfo,\n            resetApiSubscribers,\n            virtualConnectionStatus,\n            disableValidation,\n            domainSchema\n        );\n    }\n}\n";
