import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { ApiService } from '@codegena/ng-api-service/api.service';
import { ApiSchema } from '@codegena/ng-api-service/providers/api-schema';
import {
  SERVERS_INFO,
  ServersInfo
} from '@codegena/ng-api-service/providers/servers.info.provider';

import {
  API_ERROR_HANDLER,
  ApiErrorHandler
} from '@codegena/ng-api-service/providers/event-manager.provider';

// Typings for this API method
import { {{typingsDependencies}} } from '{{typingsDirectory}}';

import * as domainSchema from {{apiSchemaFile}};

/**
 * Service for angular based on ApiAgent solution.
 * Provides assured request to API method with implicit
 * validation and common errors handling scheme.
 */
@Injectable()
export class {{baseTypeName}}Service extends ApiService<{{responseModelName}}, {{requestModelName}}, {{paramsModelName}}> {

    protected get method(): {{method}} {
        return {{method}};
    }

    /**
     * Path template, example: `/some/path/{id}`.
     * @returns {string}
     */
    protected get pathTemplate(): string {
        return {{path}};
    }

    /**
     * Parameters in a query.
     * @returns {string[]}
     */
    protected get queryParams(): string[] {
        return {{queryParams}};
    }

    /**
     * API servers.
     * @returns {string[]}
     */
    protected get servers(): string[] {
        return {{servers}};
    }

    /**
     * Complete domain API schema (OAS3) with library
     * of models.
     * @returns {SubSchema}
     */
    protected get domainSchema(): any {
        return domainSchema;
    }

    /**
     * JSON Schemas using for validations at requests.
     * @returns {Schema}
     */
    protected get schema(): ApiSchema {
        return {
            response: {{responseSchema}},
            request: {{requestSchema}},
            params: {{paramsSchema}}
        } as any;
    }

		// *** Methods

    /**
     * @param {HttpClient} httpClient
     * @param {ApiErrorHandler} errorHandler
     * Обработчик ошибок HTTP-запросов и
     * @param {ServersInfo} serversInfo
     */
    constructor(
        protected httpClient: HttpClient,
        @Inject(API_ERROR_HANDLER)
            protected errorHandler: ApiErrorHandler,
        @Inject(SERVERS_INFO)
            protected serversInfo: ServersInfo
    ) {
        super(
            httpClient,
            errorHandler,
            serversInfo,
            domainSchema
        );
    }

}
